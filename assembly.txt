LEGENDA
$ - registar
N - broj (konstanta)
L - label
T - text (ime necega i slicno)
S - string (tekst pod navodnicima)
$gp - gp registar (registar opste namjene; $t0, $s1, ...)
$fp - fp registar (floating point registar; $f0, $f1, ...)


REGISTRI

Format objasnjenja gp registara:
naziv_registra | redni_broj | objasnjenje
(ispred naziva registara se podrazumijeva $)

GP REGISTRI (opste namjene):
zero  | 0     | konstanta 0
at    | 1     | rezerviran za asembler
v0-v1 | 2-3   | povratne vrijednosti funkcija   * buduci da po c standardu vracamo samo jednu vrijednost koristimo samo v0
a0-a3 | 4-7   | argumenti funkcija
t0-t7 | 8-15  | privremeni registri
s0-s7 | 16-23 | sacuvane vrijednosti
t8-t9 | 24-25 | privremeni registri
k0-k1 | 26-27 | kernel registri (rezervirano za OS)
gp    | 28    | global pointer
sp    | 29    | stack pointer
fp    | 30    | (stack) frame pointer
ra    | 31    | povratna adresa

PREZERVIRANI GP REGISTRI: s0-s7, ra, fp, sp

Format objasnjenja gp registara:
oznaka_registra | objasnjenje
(ispred naziva registara se podrazumijeva $)
(registri se gledaju u parovima, tj. f0 podrazumijeva f1, f2 podrazumijeva f3, itd.)

FP REGISTRI (floating point):
f0 -f2  | povratne vrijednosti      * buduci da po c standardu vracamo samo jednu vrijednost koristimo samo f0
f4 -f10 | privremeni registri    
f12-f14 | argumenti funkcija        * samo ako je prvi parametar funkcije float i ima do dva float parametra
f16-f18 | privremeni registri    
f20-f30 | prezervirani registri  


INSTRUKCIJE

Format objasnjenja instrukcija:
instrukcija parametri - puni naziv instrukcije, objasnjenje

Aritmeticko-logicke instrukcije:
sub $, $, $       - subtract, oduzimanje sa provjerom overflow-a
subu $, $, $      - subrtact unsigned, oduzimanje bez provjere overflow-a
add $, $, $       - add, sabiranje sa provjerom overflow-a
addu $, $, $      - add unsigned, sabiranje bez provjere overflow-a
addi $, $, N      - add immediate, sabiranje registra i konstante sa provjerom overflow-a
addiu $, $, N     - add immediate unsigned, sabiranje registra i konstante bez provjere overflow-a
mult $, $         - multiply, mnozenje sa predznakom (rezultat se smijesta u registre HI (prva 32 bita, gornja) i LO (druga 32 bita, donja))
multu $, $        - multiply unsigned, mnozenje bez predznaka (rezultat se smijesta u registre HI (prva 32 bita, gornja) i LO (druga 32 bita, donja))
div $, $          - divide, dijeljenje sa predznakom (rezultat se smijesta u registar LO, a ostatak u registar HI)
divu $, $         - divide unsigned, dijeljenje bez predznaka (rezultat se smijesta u registar LO, a ostatak u registar HI)
abs $, $          - pseudo instrukcija, u prvi registar smijesta apsolutnu vrijednost iz drugog registra
neg $, $          - pseudo instrukcija, u prvi registar smijesta negativnu vrijednost iz drugog registra

sll $, $, N       - shift left (logical), pomijeranje svih bita u lijevo za N mijesta
srl $, $, N       - shift right (logical), pomijeranje svih bita u desno za N mijesta
sra $, $, N       - shift right (arithmetic), pomijeranje svih bita u desno za N mijesta, pri cemu se prazna mjesta popunjavaju zavisno od predznaka
sllv $, $, $      - shift left (logical) variable, isto kao i sll, ali broj pomijeranja se uzima iz registra
srlv $, $, $      - shift right (logical) variable, isto kao i srl, ali broj pomijeranja se uzima iz registra
srav $, $, $      - shift right (arithmetic) variable, isto kao i sra, ali broj pomijeranja se uzima iz registra

and $, $, $       - and, operacija i na bitima registara
andi $, $, N      - and immediate, operacija i na bitima registra i konstante
or $, $, $        - or, operacija ili na bitima registara
ori $, $, N       - or immediate, operacija ili na bitima registra i konstante
xor $, $, $       - exclusive or, operacija iskljucivo ili na bitima registara           
xori $, $,        - exclusive or immediate, operacija iskljucivo ili na bitima registra i konstante
nor $, $, $       - not or, operacija nili (negirano ili) na bitima registara
slt $, $, $       - set less than, poredjenje "manje" izmedju dva registra
slti $, $, N      - set less than immediate, poredjenje "manje" izmedju registra i konstante
sltu $, $, $      - set less than unsigned, poredjenje "manje" izmedju dva registra, pri cemu se ne gleda bit predznaka
sltiu $, $, N     - set less than immediate unsigned, poredjenje "manje" izmedju registra i konstante, pri cemu se ne gleda bit predznaka


Instrukcije grananja (kontrole toka programa):
j L               - jump (bezuslovni skok), nastavi izvrsavati od L
jr $              - jump register, nastavi izvrsavati od adrese pohranjene u registru
jal L             - jump and link, isto kao i jump, ali sprema lokaciju sljedece instrukcije u registar $ra
jalr $            - jump and link register, isto kao i jump and link, ali umjesto label-a skace na adresu koja se nalazi u registru
beq $, $, L       - branch equal (to), ako su vrijednosti u registrima iste nastavi izvrsavati od L 
bne $, $, L       - branch not equal (to), ako vrijednosti u registrima nisu iste nastavi izvrsavati od L 
blt $, $, L       - pseudo instrukcija, branch less than, skok na L ako je vrijednost prvog manja od vrijednosti drugog registra 
ble $, $, L       - pseudo instrukcija, branch less than or equal, skok na L ako je vrijednost prvog manja od ili jednaka vrijednosti drugog registra 
bgt $, $, L       - pseudo instrukcija, branch greater than, skok na L ako je vrijednost prvoj registra veca od vrijednosti drugog
bge $, $, L       - pseudo instrukcija, branch greater than or equal, skok na L ako je vrijednost prvoj registra veca od ili jednaka vrijednosti drugog
bgez $, L         - branch greater than or equal zero, skok na L ako je vrijednost registra veca od ili jednaka nula
bgezal $, L       - branch greater than or equal zero and link, skok na L i link ako je vrijednost registra veca ili jednaka nula
bgtz $, L         - branch greater than zero, skok na L ako je vrijednost registra veca od nula
blez $, L         - branch less than or equal zero, skok na L ako je vrijednost registra manja od ili jednaka nula
bltz $, L         - branch less than zero, skok na L ako je vrijednost registra manja od nula
bltzal $, L       - branch less than zero and link, skok na L i link ako je vrijednost registra manja od nula

syscall           - sistemski poziv


Instrukcije citanja, spremanja (pohranjivanja) i pomijeranja:
lb $, N($)        - load byte, ucitavanje bajta iz RAM-a u registar
lh $, N($)        - load half-word, ucitavanje dva bajta (half-word) iz RAM-a u registar
lw $, N($)        - load word, ucitavanje cetiri bajta (word) iz RAM-a u registar
lbu $, N($)       - load byte unsigned, ucitavanje bajta iz RAM-a u registar, ostatak registra se puni nulama, bez obzira na predznak
lhu $, N($)       - load half-word unsigned, ucitavanje dva bajta iz RAM-a u registar, ostatak registra se puni nulama, bez obzira na predznak
la $, L           - load address, pseudo instrukcija, ucitavanje adrese label-a u registar
li $, N           - load immediate, ucitavanje broja N u registar
lui $, N          - load upper immediate, ucitavanje broja N u prvih 16 bita registra
sb $, N($)        - store byte, spremanje bajta iz registra u RAM
sh $, N($)        - store half-word, spremanje dva bajta (half-word) iz registra u RAM
sw $, N($)        - store word, spremanje cetiri bajta (word) iz registra u RAM
mfhi $            - move from HI, pomijeranje vrijednosti iz HI registra u registar opste namjene
mflo $            - move from LO, pomijeranje vrijednosti iz LO registra u registar opste namjene
move $, $         - pseudo instrukcija, premijesta vrijednost drugog registra u prvi


Instrukcije pomijeranja podataka izmedju procesora i koprocesora:
mtc1 $gp, $fp     - move to coprocessor 1, kopiranje vrijednosti iz $gp u $fp
mfc1 $gp, $fp     - move from coprocessor 1, kopiranje vrijednosti iz $fp u $gp
lwc1 $fp, N($gp)  - load word coprocessor 1, ucitavanje vrijednosti sa adrese koja se nalazi u $gp pomjerenu za N byte-a u $fp
swc1 $fp, N($gp)  - store word coprocessor 1, spremanje vrijednosti iz $fp na adresu koja se nalazi u $gp pomjerenu za N byte-a


Floating point instrukcije (podrazumijevamo da su $ fp registri ($ = $fp)):
(za nesto detaljnije objasnjenje instrukcija pogledati predavanje 6 (p6.txt))
cvt.X.Y $, $      - convert, pretvaranje vrijednost iz drugog registra tipa Y u tip X i smijestanje rezultata u prvi registar
                    X i Y mogu biti: w (cijeli broj - word), s (single precision) i d (double precision)
c.VP.X $, $       - compare, poredjenje vrijednosti dva registra logickom operacijom VP, pri cemu su operandi tipa X, 
                    rezultat se smijesta kao stanje bita CC u FCSP 
                    VP moze biti: eq (==), le (<=) i lt (<)
                    X moze biti: s (single precision) i d (double precision)
bc1t L            - branch coprocessor 1 true, skok na label L ukoliko je bit CC registra FCSP jedinica
bc1f L            - branch coprocessor 1 false, skok na label L ukoliko je bit CC registra FCSP nula 

add.s $, $, $     - add, sabiranje vrijednosti iz drugog i treceg registra, rezultat se sprema u prvi registar
sub.s $, $, $     - subtract, oduzimanje vrijednosti iz drugog i treceg registra, rezultat se sprema u prvi registar
mul.s $, $, $     - multiply, mnozenje vrijednosti iz drugog i treceg registra, rezultat se sprema u prvi registar
div.s $, $, $     - divide, dijeljenje vrijednosti iz drugog i treceg registra, rezultat se sprema u prvi registar
abs.s $, $        - absolute, apsolutna vrijednost iz drugog registra se smijesta u prvi registar
neg.s $, $        - negative, negacija vrijednosti iz drugog registra se smijesta u prvi registar
mov.s $, $        - move, pomijeranje (kopiranje) vrijednosti iz drugog registra u prvi registar
l.s $, L          - load, ucitavanje vrijednosti sa lokacije koju predstavlja label L u registar
s.s $, L          - store, spremanje vrijednosti iz registra na lokaciju koju predstavlja label L


FORMATI INSTRUKCIJA

U polja gdje su navedeni registri (rs, rt i rd) se upisuju redni brojevi registara.
Ukoliko instrukcija ne koristi neki registar (npr. jr ne koristi rt i rd), umjesto rednog broja registra pise se 0.

R FORMAT
op(6b) | rs(5b) | rt(5b) | rd(5b) | shamt(5b) | func(6b)

op    - opcode (za R format uvijek 0)
rs    - source register 
rt    - target register
rd    - destination register
shamt - shift amount (koristi se samo za shift instrukcije, kod ostalih instrukcija je 0)
func  - function code (odredjuje koja je instrukcija u pitanju)

I FORMAT
op(6b) | rs(5b) | rt(5b) | imm(16b)

op  - opcode (odredjuje koja je instrukcija u pitanju)
rs  - source register
rt  - target register
imm - immediate, numericka konstanta

J FORMAT
op(6b) | addr(26b)

op   - opcode (odredjuje koja je instrukcija u pitanju)
addr - address (destinacijska adresa)


DIREKTIVE

.section T        - deklaracija sekcije T
  ELF sekcije:
  .text           - sekcija za instrukcije
  .data           - sekcija za inicijalizirane globalne varijable
  .bss            - sekcija za neinicijalizirane globalne varijable (block starting symbol)
  .rodata         - sekcija za konstante (read-only data)
.globl L          - deklaracija simbola L globalnim (moze se koristiti u drugim fajlovima)
.global L         - isto sto i .globl
.byte N           - rezervisanje jednom bajta memorije sa vrijednosti N
.hword N          - rezervisanje dva bajta memorije sa vrijednosti N
.half N           - isto sto i .hword (na nekim platformama ne radi)
.word N           - rezervisanje cetiri bajta memorije sa vrijednosti N
.ascii S          - pohrani string S u memoriju bez null karaktera
.asciiz S         - pohrani string S u memoriju sa null karakterom
